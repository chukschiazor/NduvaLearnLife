NDUVA blends Vyond-style animated lessons, project-based learning, adaptive pathways, teacher AI course builder, moderated community, and analytics.
Your deliverables: crystal-clear architecture, API contracts, UX flows, data models, privacy & safety, DevOps plan, and acceptance tests.
Guiding Principles
‚Ä¢	Brand voice: clear, warm, slightly playful. Avoid jargon.
‚Ä¢	Mobile-first, accessible (WCAG 2.1 AA).
‚Ä¢	Privacy by design (COPPA, GDPR).
‚Ä¢	Evidence of learning: reflection + application (projects).
‚Ä¢	Motivating, not addictive: streaks/XP with healthy nudges.
‚Ä¢	Teacher empowerment: AI tools to create/publish quickly.
Build Targets
‚Ä¢	Web app (React/Next.js) + optional mobile (Flutter/React Native).
‚Ä¢	Backend: Node.js (NestJS) or Python (FastAPI), Postgres (Core), Redis (sessions/queues), S3/GCS (assets).
‚Ä¢	Auth: OAuth/email-password + parental consent flows under 13.
‚Ä¢	AI: LLM (content), TTS, animation/video render, embeddings for retrieval, rules for safety.
‚Ä¢	Observability: logs, traces, metrics; feature flags; A/B testing.
Produce (in order)
1.	High-level architecture diagram (components + data flows).
2.	ERD & data contracts (Users, Courses, Lessons, Quizzes, Attempts, Badges, Certificates, Posts, ModerationFlags, AnalyticsEvents).
3.	API surface (REST/GraphQL): endpoints, request/response schemas, auth scopes, rate limits.
4.	Adaptive engine design (signals ‚Üí policy ‚Üí next-lesson recommendations).
5.	Content pipeline (Prompt ‚Üí Script ‚Üí Storyboard ‚Üí Vyond-style scenes ‚Üí TTS ‚Üí captions ‚Üí packaging).
6.	Gamification model (XP, badges, streaks, weekly quests).
7.	Community & moderation (roles, tools, automated filters, escalation).
8.	Analytics & dashboards (student, teacher, admin).
9.	Compliance & data retention policy.
10.	Release roadmap with milestones and acceptance criteria.
Return everything as concise, implementation-ready specs with JSON where helpful.
 
üß† Adaptive Learning Engine Prompt
Use as: SYSTEM prompt for the ‚ÄúAdaptive Engine‚Äù micro-service
Design and implement an Adaptive Learning Engine for NDUVA:
Inputs (per learner)
‚Ä¢	Quiz history (accuracy, attempts, time to answer, item difficulty)
‚Ä¢	Engagement (watch time %, replays, drop-off timestamps)
‚Ä¢	Reflection quality (rubric: relevance, depth, clarity; scored 0‚Äì3)
‚Ä¢	Pace (login streak, lesson frequency, time-of-day success)
‚Ä¢	Confidence checks (self-rated 1‚Äì5)
Outputs
‚Ä¢	Next best lesson (module_id, lesson_id, difficulty level)
‚Ä¢	Remediation suggestions (micro-videos, glossary, examples)
‚Ä¢	Stretch tasks (projects, harder items)
‚Ä¢	Motivational nudge (one sentence, brand-safe)
Policy
‚Ä¢	If accuracy < 60% OR drop-off > 40%: recommend remediation at level-1 difficulty.
‚Ä¢	If accuracy 60‚Äì80%: keep level, add 1 targeted micro-drill.
‚Ä¢	If accuracy > 85% and reflection ‚â•2: level up difficulty OR unlock project.
‚Ä¢	Weekly: adjust plan to meet learner‚Äôs goal (e.g., ‚ÄúFinish Session 1 in 14 days‚Äù).
Return
‚Ä¢	Deterministic JSON policy + pseudocode for inference; include cold-start logic (age, self-assessment, pre-test).
‚Ä¢	Include A/B test hooks and fairness guardrails.
